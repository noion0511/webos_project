"use strict";

var _enzyme = require("enzyme");

var _hoc = _interopRequireDefault(require("../hoc"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('hoc', function () {
  var defaultConfig = {
    color: 'blue'
  };
  var HoC = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
    return function (props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, props), config));
    };
  });
  var NullHoC = (0, _hoc["default"])(null, function (config, Wrapped) {
    return function () {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, config));
    };
  });
  test('should support HoC factory function as first argument to hoc()', function () {
    var ImplicitNullHoC = (0, _hoc["default"])(function (config, Wrapped) {
      return function () {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, config));
      };
    });
    var Component = ImplicitNullHoC('span');
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var expected = 'span';
    var actual = subject.name();
    expect(actual).toBe(expected);
  });
  test('should support DOM node name as first argument to HoC', function () {
    var Component = HoC('span');
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var expected = 'span';
    var actual = subject.name();
    expect(actual).toBe(expected);
  });
  test('should support React component as first argument to HoC', function () {
    function Thing() {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {});
    }

    var Component = HoC(Thing);
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var expected = 'Thing';
    var actual = subject.name();
    expect(actual).toBe(expected);
  });
  test('should use default config when instance config is omitted', function () {
    var Component = HoC('span');
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var expected = defaultConfig.color;
    var actual = subject.find('span').prop('color');
    expect(actual).toBe(expected);
  });
  test('should overwrite default config with instance config', function () {
    var instanceConfig = {
      color: 'green'
    };
    var Component = HoC(instanceConfig, 'div');
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var expected = instanceConfig.color;
    var actual = subject.find('div').prop('color');
    expect(actual).toBe(expected);
  });
  test('should allow construction without default or instance configs', function () {
    var Component = NullHoC('div');
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var expected = 1;
    var actual = subject.find('div').length;
    expect(actual).toBe(expected);
  });
  test('should allow construction without default config', function () {
    var instanceConfig = {
      color: 'green'
    };
    var Component = NullHoC(instanceConfig, 'div');
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var expected = instanceConfig.color;
    var actual = subject.find('div').prop('color');
    expect(actual).toBe(expected);
  });
});