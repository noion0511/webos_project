"use strict";

var _react = require("react");

var _enzyme = require("enzyme");

var _Registry = _interopRequireDefault(require("../Registry"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SomeContext = /*#__PURE__*/(0, _react.createContext)();
describe('Registry', function () {
  var NotifiesTree = /*#__PURE__*/function (_Component) {
    _inherits(NotifiesTree, _Component);

    var _super = _createSuper(NotifiesTree);

    function NotifiesTree() {
      var _this;

      _classCallCheck(this, NotifiesTree);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.registry = _Registry["default"].create();

      _this.handleClick = function () {
        _this.registry.notify({});
      };

      return _this;
    }

    _createClass(NotifiesTree, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.registry.parent = this.context;
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(SomeContext.Provider, {
          value: this.registry.register,
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", _objectSpread(_objectSpread({}, this.props), {}, {
            onClick: this.handleClick,
            children: "Notify!"
          })), this.props.children]
        });
      }
    }]);

    return NotifiesTree;
  }(_react.Component);

  NotifiesTree.contextType = SomeContext;

  var HandlesNotification = /*#__PURE__*/function (_Component2) {
    _inherits(HandlesNotification, _Component2);

    var _super2 = _createSuper(HandlesNotification);

    function HandlesNotification() {
      var _this2;

      _classCallCheck(this, HandlesNotification);

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      _this2 = _super2.call.apply(_super2, [this].concat(args));
      _this2.state = {
        number: 0
      };

      _this2.handleResize = function () {
        _this2.setState(function (prevState) {
          var number = prevState.number + 1;
          return {
            number: number
          };
        });
      };

      return _this2;
    }

    _createClass(HandlesNotification, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.context && typeof this.context === 'function') {
          this.registry = this.context(this.handleResize);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.registry) {
          this.registry.unregister();
        }
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, this.props), {}, {
          children: this.state.number
        }));
      }
    }]);

    return HandlesNotification;
  }(_react.Component);

  HandlesNotification.contextType = SomeContext;
  test('should increment child on click', function () {
    var RegistryApp = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(NotifiesTree, {
      id: "a-btn",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
        id: "a"
      })
    }));
    RegistryApp.find('button#a-btn').simulate('click');
    var expected = '1';
    var actual = RegistryApp.find('div#a').text();
    expect(expected).toBe(actual);
  });
  test('should increment both children on top click', function () {
    var RegistryApp = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(NotifiesTree, {
      id: "a-btn",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
        id: "a"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(NotifiesTree, {
        id: "b-btn",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
          id: "b"
        })
      })]
    }));
    RegistryApp.find('button#a-btn').simulate('click');
    var expected = '1';
    var actualA = RegistryApp.find('div#a').text();
    var actualB = RegistryApp.find('div#b').text();
    expect(expected).toBe(actualA);
    expect(expected).toBe(actualB);
  });
  test('should increment the deepest child when we click child button', function () {
    var RegistryApp = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(NotifiesTree, {
      id: "a-btn",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
        id: "a"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(NotifiesTree, {
        id: "b-btn",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
          id: "b"
        })
      })]
    }));
    RegistryApp.find('button#b-btn').simulate('click');
    var expectedA = '0';
    var expectedB = '1';
    var actualA = RegistryApp.find('div#a').text();
    var actualB = RegistryApp.find('div#b').text();
    expect(expectedA).toBe(actualA);
    expect(expectedB).toBe(actualB);
  });
  test('should support removing children without error', function () {
    var RegistryApp = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(NotifiesTree, {
      id: "a-btn",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
        id: "a"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
        id: "b"
      })]
    }));
    RegistryApp.find('button#a-btn').simulate('click'); // changing children should be safe and not throw errors when notifying instances

    RegistryApp.setProps({
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
        id: "c"
      })
    });
    RegistryApp.find('button#a-btn').simulate('click');
    var expectedC = '1';
    var actualC = RegistryApp.find('div#c').text();
    expect(expectedC).toBe(actualC);
  });
});