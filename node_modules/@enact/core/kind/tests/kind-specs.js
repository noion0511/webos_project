"use strict";

var _react = require("react");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _enzyme = require("enzyme");

var _kind = _interopRequireDefault(require("../kind"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

describe('kind', function () {
  var TestContext = /*#__PURE__*/(0, _react.createContext)({
    value: 'initial'
  });
  var Kind = (0, _kind["default"])({
    name: 'Kind',
    propTypes: {
      prop: _propTypes["default"].number.isRequired,
      label: _propTypes["default"].string
    },
    defaultProps: {
      label: 'Label'
    },
    contextType: TestContext,
    styles: {
      className: 'kind'
    },
    handlers: {
      onClick: function onClick(ev, props, context) {
        props.onClick(context.value);
      }
    },
    computed: {
      value: function value(_ref) {
        var prop = _ref.prop;
        return prop + 1;
      },
      contextValue: function contextValue(props, context) {
        return context ? "context".concat(context.value) : 'unknown';
      }
    },
    render: function render(_ref2) {
      var contextValue = _ref2.contextValue,
          label = _ref2.label,
          value = _ref2.value,
          rest = _objectWithoutProperties(_ref2, ["contextValue", "label", "value"]);

      delete rest.prop;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
        title: label,
        "data-context": contextValue,
        children: value
      }));
    }
  });
  test('should assign name to displayName', function () {
    var expected = 'Kind';
    var actual = Kind.displayName;
    expect(actual).toBe(expected);
  });
  test('should support undefined handlers', function () {
    var Minimal = (0, _kind["default"])({
      name: 'Minimal',
      render: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {});
      }
    });
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Minimal, {}));
    var actual = subject.find('div');
    expect(actual).toBeDefined();
  });
  test('should default {label} property', function () {
    var subject = /*#__PURE__*/(0, _jsxRuntime.jsx)(Kind, {
      prop: 1
    });
    var expected = 'Label';
    var actual = subject.props.label;
    expect(actual).toBe(expected);
  });
  test('should default {label} property when explicitly undefined', function () {
    // Explicitly testing for undefined
    // eslint-disable-next-line no-undefined
    var subject = /*#__PURE__*/(0, _jsxRuntime.jsx)(Kind, {
      prop: 1,
      label: undefined
    });
    var expected = 'Label';
    var actual = subject.props.label;
    expect(actual).toBe(expected);
  });
  test('should add className defined in styles', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Kind, {
      prop: 1
    }));
    var expected = 'kind';
    var actual = subject.find('div').prop('className');
    expect(actual).toBe(expected);
  });
  test('should compute {value} property', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Kind, {
      prop: 1
    }));
    var expected = 2;
    var actual = subject.find('div').prop('children');
    expect(actual).toBe(expected);
  });
  test('should support contextType in handlers', function () {
    var onClick = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Kind, {
      prop: 1,
      onClick: onClick
    }));
    subject.find('div').invoke('onClick')();
    var expected = 'initial';
    var actual = onClick.mock.calls[0][0];
    expect(actual).toBe(expected);
  });
  test('should support contextType in computed', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Kind, {
      prop: 1
    }));
    var expected = 'contextinitial';
    var actual = subject.find('div').prop('data-context');
    expect(actual).toBe(expected);
  });
  test('support using hooks within kind instances', function () {
    var Comp = (0, _kind["default"])({
      name: 'Comp',
      functional: true,
      render: function render() {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        var _useState = (0, _react.useState)(0),
            _useState2 = _slicedToArray(_useState, 2),
            state = _useState2[0],
            setState = _useState2[1];

        return /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          onClick: function onClick() {
            return setState(state + 1);
          },
          children: state
        });
      }
    });
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, {}));
    subject.find('button').invoke('onClick')();
    var expected = 1;
    var actual = subject.find('button').prop('children');
    expect(actual).toBe(expected);
  });
  describe('inline', function () {
    test('should support a minimal kind', function () {
      var Minimal = (0, _kind["default"])({
        name: 'Minimal',
        render: function render() {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {});
        }
      });
      var component = Minimal.inline();
      var expected = 'div';
      var actual = component.type;
      expect(actual).toBe(expected);
    });
    test('should set default props when prop is not passed', function () {
      var component = Kind.inline(); // since we're inlining the output, we have to reference where the label prop lands --
      // the title prop of the <div> -- rather than the label prop on the component (which
      // doesn't exist due to inlining).

      var expected = 'Label';
      var actual = component.props.title;
      expect(actual).toBe(expected);
    });
    test('should set default props when passed prop is undefined', function () {
      var component = Kind.inline({
        // explicitly testing settings undefined in this test case
        // eslint-disable-next-line no-undefined
        label: undefined
      });
      var expected = 'Label';
      var actual = component.props.title;
      expect(actual).toBe(expected);
    });
    test('should include handlers', function () {
      var component = Kind.inline();
      var expected = 'function';
      var actual = typeof component.props.onClick;
      expect(actual).toBe(expected);
    });
    test('should not support context', function () {
      var component = Kind.inline();
      var expected = 'unknown';
      var actual = component.props['data-context'];
      expect(actual).toBe(expected);
    });
  });
});