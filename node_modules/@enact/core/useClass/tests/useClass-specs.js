"use strict";

var _enzyme = require("enzyme");

var _useClass = _interopRequireDefault(require("../useClass"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

describe('useClass', function () {
  var Class = function Class(arg) {
    _classCallCheck(this, Class);

    this.arg = arg;
  };

  function Component(props) {
    var instance = (0, _useClass["default"])(Class, props.arg);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      fromProps: props.arg,
      fromClass: instance.arg
    });
  }

  test('should pass arg to Class', function () {
    var arg = 'arg';
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      arg: arg
    }));
    var expected = arg;
    var actual = subject.prop('fromClass');
    expect(actual).toBe(expected);
  });
  test('should use the same instance of Class across renders', function () {
    var arg = 'arg';
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      arg: arg
    }));
    expect(subject.prop('fromProps')).toBe(arg);
    subject.setProps({
      arg: 'changed'
    }); // verify that the children still reflects the class value set at construction but the prop
    // value was updated when props were updated

    expect(subject.prop('fromClass')).toBe(arg);
    expect(subject.prop('fromProps')).toBe('changed');
  });
});